<?php
// $find  = 'qwaAsas';
// $length = strlen($find);
// echo $length; exit;
 function squre($n){
    return $n * $n;
 }
 
function array_map_php(){
    $array = [1,2,3,4,5];
    $data = array_map('square',$array);
}




function array_product_php(){
    // one single column ka data ko multyply kar deta  hai 
    $column_data = array('1','2','3','5');
    $multy_Array = array_product($column_data);
    return $multy_Array;
}



function array_sum_php(){
    //pure ak column ko sum kar deta hai
    $column_data = array('1','2','3','5');
    $sum_Array = array_sum($column_data);
    return $sum_Array;
}



function array_flip_php(){
    C  = array(
        'Bill'  => 10,
        "Joe"   => 20,
        "peter" => 30
    );
    //ushaki key value ko left to right right to left kar deta hai
    $newArray = array_flip($newArray); 
    return $newArray;
}


function array_chunk_php(){
    $cars = [
    "volvo","BMW","TOYOTA","HONDA","MERCEDES","opel"
    ];
    $newArray = array_chunk($cars,2);
    return $newArray;
}


function array_column_php(){

   $arraydata  = array(

    array( 
        'id' => 2021,
       'first_name' => 'Anil',
       'last_name'  => 'Kapoor'
   ),
    array(
        'id' =>2202,
        'first_name' =>'salman',
        'last_name'  => 'khan'
    ),

   );

   // if you want kishi ak column value ko index array convert 
   $array_data = array_column($arraydata, 'first_name')
   return $array_data;
}






function commondata_key_intersect(){
$a1 = array("a"=>"red", "b"=>"green");
$a2 = array("a"=>"red", "f"=>"green"); 
$data =  array_intersect($a1, $a2);


// if you want common data  return 
}




// array_keys();
// array_key_exists
// key_exits
function array_keys_php(){
$color = ['red','green','blue','yellow'];
 $data_array = array_keys($color);

 // if want array key data then use 

}

function array_key_exists_php(){
    $color = [
       "first"  =>"red",
       "second" => "green",
       "third"  => "blue",
       "fourth" => "yellow"

    ];
    // if check color value have or not if value goted then return true 

    $newArray = array_key_exists("third", $color);

}



function gotophp(){

echo"Hello Suraj Mishra Goto Methord do use";
echo"Hello Suraj Mishra Goto Methord do use";
echo"Hello Suraj Mishra Goto Methord do use";
echo"Hello Suraj Mishra Goto Methord do use";
goto abc;
abc: 
echo "Hey This is label ABC.";

}


function definephp(){
    define(num, 500, true);
    echo num;
    define("test",50);
    echo test;
    //can't use $ sign with constant variable name.
    // Constant Variables Global Variables.
}



// array_merge()  index or Associative Array 
// array_merge_recursive()  Multidimensional Associative Array
// array_combine()  index Array 

function arraymerge(){

$fruit     = ['orange','banana','grapes'];

$veggie    = ['carrot','pea'];
$color     = ['red','blue'];

$fruits     = ['a'=>"orange",'b'=>"banana",'c'=>"grapes"];
$veggie    = ['b'=>'carrot', 'e'=>1];

$associative_array = array_merge($fruit,$veggie);

$newArray  = array_merge($fruit,$veggie,$color);

}


function arraySlice(){
  $color  = ["Sanjay","Aman","Rehman","Karan"];
  //we want   ["Aman","Rehman"]
  array_slice($color,1, 3);
  // hame array ka slice nikal ke deta hai
}




// Password Create data Hash::make($data['password']);

 function create(array $data)
{
        return User::create([
            'name' => $data['name'],
            'email' => $data['email'],
            'password' => Hash::make($data['password']),
        ]);
}





// if we are check array value exits or not exits then use 

function array_in_data(){

$food = array('orange', 'banana', 'apple', 'grapes');
//echo in_array(needle, haystack)
echo in_array('orange', $food); // output 1 true

}


function array_search_data(){

$food = array('orange', 'banana', 'apple', 'grapes');
//echo in_array(needle, haystack)
echo array_search('banana', $food); // return 2 index number 

}

function arary_replace(){
  //array Replace only Single array and Associative array 
  $fruit = ['orange','banana','appale','grspes'];
  $veggie = ['carrot','pea'];
  $newArray = array_replace($fruit,$veggie);
print_r($newArray);

}




// Php array Count And Size I
function countdata()
{
  //$food = ['orange', 'banana', 'apple'];
  $food = array(
    'fruits' => array('orange','banana','apple'),
    'veggie' => array('carrot','collard','pea')
  );
  //echo count($food);// output 2 
  // if count all data within array on array
  // then use 
  echo count($food,1);

}


function length($length){
 return strlen($length);
}


function remove_space($str){
	$remove_space = trim($str);
	return $remove_space;
}


function lower($str){
 $stringlower = strtolower($str);
return $stringlower; 
}

function upper($str){
   $stringupper = strtoupper($str);
   return $stringupper;
}

function addcslashess(){

  $strAddslashes  =	addcslashes($str,$arg);
  return $strAddslashes;
}

// push data ley abd value pair
$item =5;
$size = array();
$point = 0;

function push($data){
	if($point >= $item){

         echo "stack is overflow";
	}else{
		$size[$this->point] = $data;
	}

}



function array_reverses($array_associative){
 
  $reverse = array_reverse($array_associative);
  return $reverse;
}

//ASCII TABLE

// uniqid 
function uniqgenrate_refresh()
{
        $data =    uniqid('clever-');
        return $data;
}

function diffrent(array $a, $b){
// means not math 
$result = array_diff($a, $b);
return $result;
}

function urlencodes($user_query, $str){
	$string = $str.urlencode($user_query);
	return $string;
}

// first follow initialization then your statement put 


//########################## foreach object  ########################################### 

function foreachdata($initialization, $value, $condition = '') {
    $i = $initialization;  // Initialize the counter variable with the given initialization value

    foreach ($value as $data) {
     //   echo $data->name . "\n";  // Print the name property of each element
        $i++;  // Increment the counter variable
    }
}

// Example usage
$objects = [
    (object) ['name' => 'Alice'],
    (object) ['name' => 'Bob'],
    (object) ['name' => 'Charlie']
];

//foreachdata(0, $objects);  // This will print the names of the objects




//############################# While loop######################################## 


function whilestatement($initialization, $value) {
    $a = $initialization;  // Initialize the variable $a with the given $initialization value

    while ($a <= 10) {
        echo $value . "\n";  // Print the value and add a newline for better readability
        $a++;  // Increment the variable $a
    }
}

// Example usage
//whilestatement(1, 'value');  // This will print 'value' 10 times

function whileloopdata($initialization, $value, $condition = '') {
    $i = $initialization;  // Initialize the counter variable with the given initialization value

    $count = count($value);  // Get the count of the array or iterable

    while ($i < $count) {
        echo $value[$i]->name . "\n";  // Print the name property of each element
        $i++;  // Increment the counter variable
    }
}

// Example usage
$objects = [
    (object) ['name' => 'Alice'],
    (object) ['name' => 'Bob'],
    (object) ['name' => 'Charlie']
];

//whileloopdata(0, $objects);  // This will print the names of the objects



///###################################### Do while loop ######################################################


function dowhileloopdata($initialization, $condition,$a)
{
  $initialization;

  do{
    echo "Suraj Mishra";
  }while($a <= $condition);

}


function dowhileloopdatas($initialization, $value, $condition) {
    $i = $initialization;  // Initialize the counter variable with the given initialization value
    $count = count($value);  // Get the count of the array or iterable

    do {
        echo $value[$i]->name . "\n";  // Print the name property of each element
        $i++;  // Increment the counter variable
    } while ($i < $count && $i <= $condition);
}

// Example usage
$objects = [
    (object) ['name' => 'Alice'],
    (object) ['name' => 'Bob'],
    (object) ['name' => 'Charlie']
];

//dowhileloopdata(0, $objects, 2);  // This will print the names of the objects until the condition is met




//############################# For each multy array ######################################## 



function data_keyandvalue($data, $dumy = '') {
    $list = [];  // Initialize the list array


$objects = [
    (object) ['name' => 'Alice', 'age' => 30],
    (object) ['name' => 'Bob', 'age' => 25],
    (object) ['name' => 'Charlie', 'age' => 35]
];

    foreach($data as $index => $object) {
        // foreach ($object as $key => $value) {
        //     $list[$index][$key] = $value;
        // }
    }

   // return $list;  // Return the list array
}

// Example usage
//$result = data_keyandvalue($objects);
//print_r($result[0]['name']);  // This will output the associati



//######################################################### try catch Error handling #############


function trycath($value, $condition){

try{

  if($value == 4){
    throw new Exception('please valid Number');
  }
  echo 2/$value;

}catch(Exception $e){
  echo $e->getMessage();

}
 
}







function forloopdata($initialization, $condition, $data = ''){ 
  for($a = 1; $a <= 10; $a++){
    echo "Suraj mishra";
  }
}

// if we show data tabular form then work means matrix 

function innerouterfor($initialization, $condition, $data = '')
{
  for($a = 1; $a<=100; $a = $a+10){
    for($b = $a; $b < $a+10; $b++ ){
      echo $b."";

    }
    echo "<br";
  }

}

// Array data for loop 
$colors = ['read',20,'blue',12.50];

function arrayforloop($initialization = '', $condition =''){

for($i = 0; $i<4; $i++)
{
  echo $colors[$i]."<br>";
}

}









function data_keyandvalues($data, $dumy = '') {
    $list = [];  // Initialize the list array

    foreach($data as $key => $value) {
        $list[$key] = $value;
    }

    return $list;  // Return the list array
}

$result = data_keyandvalue(array('a' => 1, 'b' => 2, 'c' => 3));
//echo $result['a'];  // This will output the value of the key 'a'




function terneryoperater(){

}



$data = array('list'=>1,'add'=>1, 'upadate'=>1, 'delete'=>1);


if($data['list']  == '1'){
            // <h1> list</h1>
     if($data['add'] == '1'){
     	// <h1> add</h1>
     }
   
    if($data['delete'] == '1'){
     	// <h1> delete</h1>
     }
      if($data['upadate'] == '1'){
     	// <h1> add</h1>
     }


}

function switchexpression($weeekday)
{
    switch($weeekday){
case 1:
echo "Today is Monday";
break;
case 2: 
echo "Today is Tuesday";
break;
case 3:
echo "Today is Wednsday";
break;
case 4:
echo "Toady is Thusrday";
break;
case 5:
echo "Today is Friday";
break;
case 6:
echo "Today is Staturday";
break;
case 7:
echo "Today is Sunday";
brek;
default;
echo"Enter the valid Weekday";
break;
}
}
//switchexpression(1);

// try catch throw handling 

       
function trycatchhandling(){
  header('Content-Type: application/json');

try {
    // Assume you are receiving POST data
    if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
        throw new Exception('Invalid request method', 405);
    }

    // Retrieve POST data
    $username = isset($_POST['username']) ? $_POST['username'] : null;
    $email = isset($_POST['email']) ? $_POST['email'] : null;

    // Validate input
    if (!$username || !$email) {
        throw new Exception('Missing required fields', 400);
    }

    // Perform your logic here (e.g., save to database)
    // ...

    // If everything is successful, return a success response
    echo json_encode([
        'status' => 'success',
        'message' => 'Form submitted successfully'
    ]);

} catch (Exception $e) {
    // Return an error response
    http_response_code($e->getCode() ?: 500); // Use the exception code or default to 500
    echo json_encode([
        'status' => 'error',
        'message' => $e->getMessage()
    ]);
}
}


// Foreach list() // not need nisted loop use list()
// 

$emp = [
  [1,"Krishana","Manager",50000],
  [2,"Salman","Saleman",20000],
  [3, "Mohan","Computer Operator",12000],
  [4,"Amir","Driver",5000]
];

function listassociative(){
 //$data = [];
// foreach($data, list($id,$name,$designation,$salary))
// {
//   echo "$id $name $designation $salary <br>";
// }

}


//break continue if   condition or switch statement 

function break_continue(){
    for($a =1; $a <= 10; $a++){
        if($a == 3){
            continue;
        }
        echo $a."<br>";
    }
}






// 
// one command how to make  controller model migrate
// orm 
// quer builder
// dashboaed deploye  github
// search

?>






